{"version":3,"sources":["nubank/workspaces/card_types/fulcro3.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/any?","cljs.core/boolean?","cljs.core/map?","cljs.spec.alpha/or-spec-impl","cljs.core/fn?","js/nubank","js/nubank.workspaces","js/nubank.workspaces.card-types","js/nubank.workspaces.card-types.fulcro3","js/nubank.workspaces.card-types.fulcro3.css-components*","nubank.workspaces.card-types.fulcro3/css-components*","cljs.core.atom","js/nubank.workspaces.card-types.fulcro3.persistent-apps*","nubank.workspaces.card-types.fulcro3/persistent-apps*","nubank.workspaces.card-types.fulcro3/gen-css-component","generated-name","cljs.core.gensym","component-key","cljs.core.keyword","cljs.core/name","com.fulcrologic.fulcro.components/configure-component!","_","cljs.core/deref","cljs.core.into","cljs.core.keep_indexed","i","v","or__4126__auto__","com.fulcrologic.fulcro.components.get_query","cljs.core/with-meta","nubank.workspaces.card-types.fulcro3/safe-initial-state","comp","params","com.fulcrologic.fulcro.components/has-initial-app-state?","com.fulcrologic.fulcro.components.get_initial_state","nubank.workspaces.card-types.fulcro3/make-root","Root","this","map__73258","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","root","com.fulcrologic.fulcro.components/props","com.fulcrologic.fulcro.components/class->registry-key","com.fulcrologic.fulcro.components/registry-key->class","factory","com.fulcrologic.fulcro.components.factory","computed","com.fulcrologic.fulcro.components.shared","cljs.core/seq","G__73274","G__73275","com.fulcrologic.fulcro.components/computed","p__73281","map__73282","nubank.workspaces.card-types.fulcro3/fulcro-initial-state","initial-state","wrap-root?","root-state","state-tree","G__73298","wrapped","cljs.core.merge","db","com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db","com.fulcrologic.fulcro.algorithms.merge.pre_merge_transform","p__73309","map__73312","nubank.workspaces.card-types.fulcro3/upsert-app","app","persistence-key","app-id","config","temp__5751__auto__","instance","and__4115__auto__","G__73317","cljs.core/contains?","cljs.core.assoc","cljs.core.update","cljs.core/assoc","cljs.core/assoc-in","com.fulcrologic.fulcro.application.fulcro_app","cljs.core.swap_BANG_","p__73322","map__73323","nubank.workspaces.card-types.fulcro3/dispose-app","cljs.core/dissoc","temp__5753__auto__","app-uuid","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid","com.fulcrologic.fulcro.inspect.inspect-client/dispose-app","nubank.workspaces.card-types.fulcro3/refresh-css!","com.fulcrologic.fulcro-css.css-injection/upsert-css","nubank.workspaces.card-types.fulcro3/add-component-css!","cljs.core/conj","p__73328","map__73329","nubank.workspaces.card-types.fulcro3/mount-at","node","new-app","com.fulcrologic.fulcro.application.mount_BANG_","options__55349__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__73350","js/nubank.workspaces.card-types.fulcro3.FulcroPortal","props__55350__auto__","this__55351__auto__","init-state__55352__auto__","obj73360","G__73361","G__73362","goog.object/get","obj73364","nubank.workspaces.card-types.fulcro3/FulcroPortal","root-node-props","props","goog.object/set","com.fulcrologic.fulcro.dom.node","G__73346","com.fulcrologic.fulcro.application/force-root-render!","cljs.core/reset!","js/ReactDOM.unmountComponentAtNode","com.fulcrologic.fulcro.dom.macro_create_element","nubank.workspaces.card-types.fulcro3/fulcro-portal*","nubank.workspaces.card-types.fulcro3/fulcro-portal","component","options","G__73369","nubank.workspaces.card-types.fulcro3/inspector-set-app","card-id","map__73370","nubank.workspaces.data/active-card","com.fulcrologic.fulcro.inspect.inspect-client/set-active-app","nubank.workspaces.card-types.fulcro3/debounced-refresh-css!","goog.functions/debounce","p__73375","map__73376","nubank.workspaces.card-types.fulcro3/fulcro-card-init","card","nubank.workspaces.card-types.util/positioned-card","nubank.workspaces.data/active-cards*","G__73383","G__73384","nubank.workspaces.ui.core/button","G__73385","G__73386","nubank.workspaces.ui/restart-card","p1__73388#","nubank.workspaces.card-types.fulcro3/fulcro-card","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/map-spec-impl","G__73394"],"sourcesContent":["(ns nubank.workspaces.card-types.fulcro3\n  (:require\n    [cljs.spec.alpha :as s]\n    [com.fulcrologic.fulcro-css.css-injection :as cssi]\n    [com.fulcrologic.fulcro.algorithms.merge :as f.merge]\n    [com.fulcrologic.fulcro.algorithms.normalize :refer [tree->db]]\n    [com.fulcrologic.fulcro.application :as fapp]\n    [com.fulcrologic.fulcro.components :as fc]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.inspect.inspect-client :as fi.client]\n    [goog.functions :as gfun]\n    [goog.object :as gobj]\n    [nubank.workspaces.card-types.util :as ct.util]\n    [nubank.workspaces.data :as data]\n    [nubank.workspaces.model :as wsm]\n    [nubank.workspaces.ui :as ui]\n    [nubank.workspaces.ui.core :as uc]))\n\n; region portal\n\n(s/def ::root any?)\n(s/def ::wrap-root? boolean?)\n(s/def ::app map?)\n(s/def ::persistence-key any?)\n(s/def ::initial-state (s/or :fn? fn? :factory-param any?))\n(s/def ::root-state map?)\n(s/def ::computed map?)\n(s/def ::root-node-props map?)\n\n(defonce css-components* (atom #{}))\n(defonce persistent-apps* (atom {}))\n\n(defn gen-css-component []\n  (let [generated-name (gensym)\n        component-key  (keyword \"nubank.workspaces.card-types.fulcro3\" (name generated-name))]\n    (fc/configure-component! (fn *dyn-root* [])\n      component-key\n      {:query (fn [_] (into\n                        []\n                        (keep-indexed (fn [i v] {(keyword (str \"item\" i))\n                                                 (or (fc/get-query v) (with-meta [] {:component v}))}))\n                        @css-components*))})))\n\n(defn safe-initial-state [comp params]\n  (if (fc/has-initial-app-state? comp)\n    (fc/get-initial-state comp params)\n    params))\n\n(defn make-root [Root]\n  (let [generated-name (gensym)\n        component-key  (keyword \"nubank.workspaces.card-types.fulcro3\" (name generated-name))]\n    (fc/configure-component! (fn *dyn-root* [])\n      component-key\n      {:initial-state (fn [_ params]\n                        {:ui/root (or (safe-initial-state Root params) {})})\n       :query         (fn [_] [:fulcro.inspect.core/app-id {:ui/root (fc/get-query Root)}])\n       :render        (fn [this]\n                        (let [{:ui/keys [root]} (fc/props this)\n                              Root     (-> Root fc/class->registry-key fc/registry-key->class)\n                              factory  (fc/factory Root)\n                              computed (fc/shared this ::computed)]\n                          (if (seq root)\n                            (factory (cond-> root computed (fc/computed computed))))))})))\n\n(defn fulcro-initial-state [{::keys [initial-state wrap-root? root root-state]\n                             :or    {wrap-root? true initial-state {}}}]\n  (let [state-tree (if (fn? initial-state)\n                     (initial-state (safe-initial-state root nil))\n                     (safe-initial-state root initial-state))\n        wrapped    (merge\n                     (if wrap-root?\n                       {:ui/root state-tree}\n                       state-tree)\n                     root-state)\n        Root       (if wrap-root? (make-root root) root)\n        db         (tree->db Root wrapped true (f.merge/pre-merge-transform {}))]\n    db))\n\n(defn upsert-app [{::keys                    [app persistence-key computed]\n                   :fulcro.inspect.core/keys [app-id]\n                   :as                       config}]\n  (if-let [instance (and persistence-key (get @persistent-apps* persistence-key))]\n    instance\n    (let [app      (cond-> app\n                     (not (contains? app :initial-state))\n                     (assoc :initial-db (fulcro-initial-state config))\n\n                     computed\n                     (update :shared assoc ::computed computed)\n\n                     app-id\n                     (assoc-in [:initial-db :fulcro.inspect.core/app-id] app-id))\n          ;; TASK: explicit initial state handling\n          instance (fapp/fulcro-app app)]\n      (if persistence-key (swap! persistent-apps* assoc persistence-key instance))\n      instance)))\n\n(defn dispose-app [{::keys [persistence-key] :as app}]\n  (if persistence-key (swap! persistent-apps* dissoc persistence-key))\n  (when-let [app-uuid (fi.client/app-uuid app)]\n    (fi.client/dispose-app app-uuid)))\n\n(defn refresh-css! []\n  (cssi/upsert-css \"fulcro-portal-css\" {:component (gen-css-component)}))\n\n(defn add-component-css! [comp]\n  (swap! css-components* conj comp)\n  (refresh-css!))\n\n(defn mount-at [app {::keys [root wrap-root? persistence-key] :or {wrap-root? true}} node]\n  (add-component-css! root)\n  (let [instance (if wrap-root? (make-root root) root)\n        new-app  (fapp/mount! app instance node {:initialize-state? false})]\n    (if persistence-key\n      (swap! persistent-apps* assoc persistence-key new-app))\n    new-app))\n\n(fc/defsc FulcroPortal\n  [this {::keys [root-node-props]}]\n  {:componentDidMount\n   (fn [this]\n     (let [props (fc/props this)\n           app   (upsert-app props)]\n       (gobj/set this \"app\" app)\n       (mount-at app props (dom/node this))))\n\n   :componentDidUpdate\n   (fn [this _ _] (some-> (gobj/get this \"app\") fapp/force-root-render!))\n\n   :componentWillUnmount\n   (fn [this]\n     (let [app (gobj/get this \"app\")]\n       (dispose-app app)\n       (reset! app nil)\n       (js/ReactDOM.unmountComponentAtNode (dom/node this))))\n\n   :shouldComponentUpdate\n   (fn [this _ _] false)}\n\n  (dom/div root-node-props))\n\n(def fulcro-portal* (fc/factory FulcroPortal))\n\n(defn fulcro-portal\n  \"Create a new portal for a Fulcro app, available options:\n\n  ::root - the root component to be mounted\n  ::app This is the app configuration, same options you could send to `fulcro/new-fulcro-client`\n  ::wrap-root? - by default the portal expects a component with ident to be mounted and\n  the portal will wrap that with an actual root (with no ident), if you wanna provide\n  your own root, set this to `false`\n  ::initial-state - Accepts a value or a function. A value will be used to call the\n  initial state function of your root. If you provide a function, the value returned by\n  it will be the initial state.\n  ::root-state - This map will be merged into the app root state to be part of the initial\n  state in the root, this is useful to set things like `:ui/locale` considering\n  ::computed - send computed props to the root\n  ::root-node-props - use this to send props into the root note created to mount the\n  portal on.\"\n  [component options]\n  (fulcro-portal* (assoc options ::root component)))\n\n; endregion\n\n; region card definition\n\n(defn inspector-set-app [card-id]\n  (let [{::keys [app]} (data/active-card card-id)\n        app-uuid (fi.client/app-uuid app)]\n    (if app-uuid\n      (fi.client/set-active-app app-uuid))))\n\n(def debounced-refresh-css!\n  (gfun/debounce refresh-css! 100))\n\n(defn fulcro-card-init\n  [{::wsm/keys [card-id]\n    :as        card}\n   config]\n  (let [app (upsert-app (assoc config :fulcro.inspect.core/app-id card-id))]\n    (ct.util/positioned-card card\n      {::wsm/dispose\n       (fn [node]\n         (dispose-app app)\n         (js/ReactDOM.unmountComponentAtNode node))\n\n       ::wsm/refresh\n       (fn [_]\n         (debounced-refresh-css!)\n         (fapp/force-root-render! app))\n\n       ::wsm/render\n       (fn [node]\n         (swap! data/active-cards* assoc-in [card-id ::app] app)\n         (mount-at app config node))\n\n       ::wsm/render-toolbar\n       (fn []\n         (dom/div\n           (uc/button {:onClick #(inspector-set-app card-id)}\n             \"Inspector\")\n           (uc/button {:onClick #(ui/restart-card card-id)}\n             \"Restart\")))\n\n       ::app\n       app})))\n\n(defn fulcro-card [config]\n  {::wsm/init\n   #(fulcro-card-init % config)})\n\n(s/fdef fulcro-card\n  :args (s/cat :config (s/keys\n                         :req [::root]\n                         :opt [::wrap-root?\n                               ::app\n                               ::initial-state]))\n  :ret ::wsm/card-instance)\n\n; endregion\n"]}