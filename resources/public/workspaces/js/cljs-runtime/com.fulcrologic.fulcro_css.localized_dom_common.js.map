{"version":3,"sources":["com/fulcrologic/fulcro_css/localized_dom_common.cljc"],"mappings":"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","names":["s","clojure.string/replace","k","cljs.core/re-seq","cljs.core/name","com.fulcrologic.fulcro-css.localized-dom-common/parse","tokens","get-tokens","id","p1__69005#","cljs.core.filter","cljs.core/re-matches","cljs.core/first","classes","p1__69006#","global-classes","cljs.core.into","cljs.core.comp","p1__69007#","cljs.core.map","sanitized-id","remove-separators","cljs.core.ex_info","G__69011","cljs.core.keep","cljs.core.assoc","com.fulcrologic.fulcro-css.localized-dom-common/combined-classes","classes-seq","classes-str","clojure.string.join","cljs.core/seq","cljs.core.conj","p","nm","dflt","cljs.core/map?","cljs.core.get","cljs.core/object?","goog.object/get","v","goog.object/set","cljs.core.dissoc","goog.object/remove","com.fulcrologic.fulcro-css.localized-dom-common/fold-in-classes","props","component","temp__5751__auto__","extra-classes","pget","old-classes","pdissoc","clz","com.fulcrologic.fulcro.components/react-type","new-classes","c","G__69022","clojure.string/starts-with?","G__69025","G__69026","com.fulcrologic.fulcro-css.css/local-class","strip-prefix","passoc","com.fulcrologic.fulcro-css.localized-dom-common/add-kwprops-to-props","kw","map__69030","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core/vec","cljs.core.concat","com.fulcrologic.fulcro.components/*parent*","p1__69028#","G__69032","G__69033","goog.object/clone","existing-classes","G__69036","or__4126__auto__"],"sourcesContent":["(ns com.fulcrologic.fulcro-css.localized-dom-common\n  (:refer-clojure :exclude [map meta time set symbol filter])\n  (:require\n    com.fulcrologic.fulcro-css.css\n    #?(:clj [cljs.tagged-literals :refer [->JSValue]])\n    #?@(:cljs [[cljsjs.react]\n               [cljsjs.react.dom]\n               [goog.object :as gobj]])\n    [com.fulcrologic.fulcro.components :as comp]\n    [clojure.string :as str]))\n\n\n(letfn [(remove-separators [s] (when s (str/replace s #\"^[.#$]\" \"\")))\n        (get-tokens [k] (re-seq #\"[#.$]?[^#.$]+\" (name k)))]\n  (defn- parse\n    \"Parse CSS shorthand keyword and return map of id/classes.\n\n    (parse :.klass3#some-id.klass1.klass2)\n    => {:id        \\\"some-id\\\"\n        :classes [\\\"klass3\\\" \\\"klass1\\\" \\\"klass2\\\"]}\"\n    [k]\n    (if k\n      (let [tokens         (get-tokens k)\n            id             (->> tokens (clojure.core/filter #(re-matches #\"^#.*\" %)) first)\n            classes        (->> tokens (clojure.core/filter #(re-matches #\"^\\..*\" %)))\n            global-classes (into []\n                             (comp\n                               (clojure.core/filter #(re-matches #\"^[$].*\" %))\n                               (clojure.core/map (fn [k] (-> k\n                                                           name\n                                                           (str/replace \"$\" \"\")))))\n                             tokens)\n            sanitized-id   (remove-separators id)]\n        (when-not (re-matches #\"^(\\.[^.#$]+|#[^.#$]+|[$][^.#$]+)+$\" (name k))\n          (throw (ex-info \"Invalid style keyword. It contains something other than classnames and IDs.\" {})))\n        (cond-> {:global-classes global-classes\n                 :classes        (into [] (keep remove-separators classes))}\n          sanitized-id (assoc :id sanitized-id)))\n      {})))\n\n(defn- combined-classes\n  \"Takes a sequence of classname strings and a string with existing classes. Returns a string of these properly joined.\n\n  classes-str can be nil or and empty string, and classes-seq can be nil or empty.\"\n  [classes-seq classes-str]\n  (str/join \" \" (if (seq classes-str) (conj classes-seq classes-str) classes-seq)))\n\n(letfn [(pget [p nm dflt] (cond\n                            #?@(:clj [(instance? cljs.tagged_literals.JSValue p) (get-in p [:val nm] dflt)])\n                            (map? p) (get p nm dflt)\n                            #?@(:cljs [(object? p) (gobj/get p (name nm) dflt)])))\n        (passoc [p nm v] (cond\n                           #?@(:clj [(instance? cljs.tagged_literals.JSValue p) (->JSValue (assoc (.-val p) nm v))])\n                           (map? p) (assoc p nm v)\n                           #?@(:cljs [(object? p) (do (gobj/set p (name nm) v) p)])))\n        (pdissoc [p nm] (cond\n                          #?@(:clj [(instance? cljs.tagged_literals.JSValue p) (->JSValue (dissoc (.-val p) nm))])\n                          (map? p) (dissoc p nm)\n                          #?@(:cljs [(object? p) (do (gobj/remove p (name nm)) p)])))\n        (strip-prefix [s] (str/replace s #\"^[:.#$]*\" \"\"))]\n  (defn fold-in-classes\n    \"Update the :className prop in the given props to include the classes in the :classes entry of props. Works on js objects and CLJ maps as props.\n    If using js props, they must be mutable.\"\n    [props component]\n    (if-let [extra-classes (pget props :classes nil)]\n      (let [old-classes (pget props :className \"\")]\n        (pdissoc\n          (if component\n            (let [clz         (comp/react-type component)\n                  new-classes (combined-classes (clojure.core/map (fn [c]\n                                                                    (let [c (some-> c name)]\n                                                                      (cond\n                                                                        (nil? c) \"\"\n                                                                        (str/starts-with? c \".\") (com.fulcrologic.fulcro-css.css/local-class clz (strip-prefix c))\n                                                                        (str/starts-with? c \"$\") (strip-prefix c)\n                                                                        :else c))) extra-classes) old-classes)]\n              (passoc props :className new-classes))\n            (let [new-classes (combined-classes (clojure.core/map strip-prefix extra-classes) old-classes)]\n              (passoc props :className new-classes)))\n          :classes))\n      props)))\n\n(defn add-kwprops-to-props\n  \"Combine a hiccup-style keyword with props that are either a JS or CLJS map.\"\n  [props kw]\n  (let [{:keys [global-classes classes id] :or {classes []}} (parse kw)\n        classes (vec (concat\n                       (if comp/*parent*\n                         (clojure.core/map #(com.fulcrologic.fulcro-css.css/local-class (comp/react-type comp/*parent*) %) classes)\n                         classes)\n                       global-classes))]\n    (fold-in-classes\n      (if #?(:clj false :cljs (or (nil? props) (object? props)))\n        #?(:clj  props\n           :cljs (let [props            (gobj/clone props)\n                       existing-classes (gobj/get props \"className\")]\n                   (when (seq classes) (gobj/set props \"className\" (combined-classes classes existing-classes)))\n                   (when id (gobj/set props \"id\" id))\n                   props))\n        (let [existing-classes (:className props)]\n          (cond-> (or props {})\n            (seq classes) (assoc :className (combined-classes classes existing-classes))\n            id (assoc :id id))))\n      comp/*parent*)))\n\n\n"]}