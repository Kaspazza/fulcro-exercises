{"version":3,"sources":["nubank/workspaces/lib/local_storage.cljs"],"mappings":"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","names":["nubank.workspaces.lib.local-storage/local-storage","js/window","var_args","G__68792","nubank.workspaces.lib.local-storage/get","js/Error","key","nubank.workspaces.lib.local_storage.get","default","temp__5751__auto__","value","cljs.core.pr_str","cljs.reader.read_string","nubank.workspaces.lib.local-storage/set!","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","nubank.workspaces.lib.local-storage/update!","seq68800","G__68801","cljs.core/first","cljs.core/next","G__68802","self__4723__auto__","f","args","cljs.core.apply","nubank.workspaces.lib.local-storage/remove!","nubank.workspaces.lib.local-storage/read-transit","s","reader","cognitect.transit.reader","cognitect.transit/read","nubank.workspaces.lib.local-storage/write-transit","x","writer","cognitect.transit.writer","cognitect.transit/write","G__68814","nubank.workspaces.lib.local-storage/tget","nubank.workspaces.lib.local_storage.tget","nubank.workspaces.lib.local-storage/tset!","nubank.workspaces.lib.local-storage/tupdate!","seq68825","G__68826","G__68827"],"sourcesContent":["(ns nubank.workspaces.lib.local-storage\n  (:refer-clojure :exclude [get set!])\n  (:require [cljs.reader :refer [read-string]]\n            [cognitect.transit :as t]))\n\n(def local-storage (.-localStorage js/window))\n\n;; edn\n\n(defn get\n  ([key] (get key nil))\n  ([key default]\n   (if-let [value (.getItem local-storage (pr-str key))]\n     (read-string value)\n     default)))\n\n(defn set! [key value]\n  (.setItem local-storage (pr-str key) (pr-str value)))\n\n(defn update! [key f & args]\n  (.setItem local-storage (pr-str key) (pr-str (apply f (get key) args))))\n\n(defn remove! [key]\n  (.removeItem local-storage key))\n\n;; transit\n\n(defn read-transit [s]\n  (let [reader (t/reader :json)]\n    (t/read reader s)))\n\n(defn write-transit [x]\n  (let [writer (t/writer :json)]\n    (t/write writer x)))\n\n(defn tget\n  ([key] (tget key nil))\n  ([key default]\n   (if-let [value (.getItem local-storage (pr-str key))]\n     (read-transit value)\n     default)))\n\n(defn tset! [key value]\n  (.setItem local-storage (pr-str key) (write-transit value)))\n\n(defn tupdate! [key f & args]\n  (.setItem local-storage (pr-str key) (write-transit (apply f (tget key) args))))\n\n(comment\n  (-> `(:hello {})\n      type)\n\n  (-> `(:hello {})\n      (write-transit)\n      (read-transit)\n      type)\n\n  (-> `(:hello {})\n    (pr-str)\n    (read-string)\n    type))\n"]}