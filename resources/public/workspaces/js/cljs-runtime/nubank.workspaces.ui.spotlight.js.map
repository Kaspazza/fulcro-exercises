{"version":3,"sources":["nubank/workspaces/ui/spotlight.cljs"],"mappings":";AAYA,AAAA,AAAKA;AACL,AAAA,AAAKC;AAEL,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA6BM;AAA7B,AAAAF,AAAAJ,AAAA,AAAgCO;AAAhC,AACE,AAAAC,AAAID;AAAJ,AAAA,AAAAC;AAAAA;;AAAU,AAAKF;;;AAEjB,AAAA,AAAAG,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAT,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAAC,AAAAO,AAAAA;AAAAA,AAAwCG;AAAxC,AAAAT,AAAAM,AAAA,AAA2BE;AAA3B,AAAAR,AAAAM,AAAA,AAAgCJ;AAAhC,AACE,AAAI,AAAA,AAACQ,AAAEF;AACL,AAAKN;;AACL,AAAK,AAAAS,AAAQF;AAARE,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAA,AAAA;AAAA;;AAAA,AAAAA,AAAmBC;;AAAxB,AAAkC,AAACX,AAAaQ;;;AAEpD,AAAA,AAAAI,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjB,AAAA,AAAAiB,AAAA,AAAA,AAAA,AAAA,AAAAhB,AAAAC,AAAAe,AAAAA;AAAA,AAAAd,AAAAc,AAAA,AAA2BE;AAA3B,AAAAhB,AAAAc,AAAA,AAAmCG;AAAnC,AACE,AAAA,AAAA,AAAA,AAACC,AAAwCD,AACA,AAAA,AAAAE,AAACC;AAAD,AAAM,AAAAD,AAAA,AAACE,AAAuB,AAAAF,AAAClB;AAAiBe;;AAE3F,AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAqBE,AAShB,AAAKC;AAAL,AACMA,AACA,AAAA,AAACC;AAXZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAoBO,AAAKD;AAAL,AACE,AAAAE,AAA8C,AAACG,AAAiBL;AAAhEE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7B,AAAA,AAAA6B,AAAA,AAAA,AAAA,AAAA,AAAA5B,AAAAC,AAAA2B,AAAAA;AAAAA,AAAwCE;AAAxC,AAAA5B,AAAA0B,AAAA,AAAcT;AAAd,AAAAjB,AAAA0B,AAAA,AAA2BV;AAA3B,AACMQ,AACA,AAAA,AAACM,AACC,AAAI,AAAA,AAAG,AAACC,AAAMd,AACZD,AACA,AAACD,AAAYa;AA1BhC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAA,AAAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASK,AAAKE;AAAL,AACMA,AACA,AAAA,AAACC;AAXZ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAoBO,AAAKD;AAAL,AACE,AAAAG,AAA8C,AAACE,AAAiBL;AAAhEG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9B,AAAA,AAAA8B,AAAA,AAAA,AAAA,AAAA,AAAA7B,AAAAC,AAAA4B,AAAAA;AAAAA,AAAwCC;AAAxC,AAAA5B,AAAA2B,AAAA,AAAcV;AAAd,AAAAjB,AAAA2B,AAAA,AAA2BX;AAA3B,AACMQ,AACA,AAAA,AAACM,AACC,AAAI,AAAA,AAAG,AAACC,AAAMd,AACZD,AACA,AAACD,AAAYa;AA1BhC,AAAA,AAAA,AAAA;AA+BA,AAAA;;;AAAAI,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvC,AAAA,AAAAuC,AAAA,AAAA,AAAA,AAAA,AAAAtC,AAAAC,AAAAqC,AAAAA;AAAA,AAAApC,AAAAoC,AAAA,AAAgCpB;AAAhC,AAAA,AAAA,AAAA,AAAAqB;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzC,AAAA,AAAAyC,AAAA,AAAA,AAAA,AAAA,AAAAxC,AAAAC,AAAAuC,AAAAA;AAAA,AAAAtC,AAAAsC,AAAA,AACmBS;AADnB,AAAA/C,AAAAsC,AAAA,AACyBU;AADzB,AAAA,AAAAT,AAAAC;AAAAC,AAAA;AAAA,AAAA,AAAAD,AAAAC;;AAAA,AAAA,AAEI,AAAAQ,AAAwB,AAAA,AAAAE,AAACC,AAAQL,AAAMC;AAAvCC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApD,AAAA,AAAAoD,AAAA,AAAA,AAAA,AAAA,AAAAnD,AAAAC,AAAAkD,AAAAA;AAAA,AAAAjD,AAAAiD,AAAA,AAAeC;AACTlC,AAAiB,AAACqC,AAAQpD,AAAae;AACvCsC,AAAiB,AAAA,AAAA,AAAA,AAACvC,AAA2BmC,AAAgBlC;AAFnE,AAGE,AAAA,AAAA,AAACuC,AAAMR,AAAMS,AAAUR,AAAIS,AACfzC,AACSsC;AAP3B,AAAA,AAAAd,AAAAD;;AAAA;AAAA,AAAA,AAAAf;AAAA,AAAA,AAAAkB,AAAAF;AAAAG,AAAA;AAAA,AAAA,AAAAH,AAAAG;;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAArB,AAAA;AAAA,AAAA,AAAAoB;AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAE,AAAAA,AAAAtB,AAAAsB,AAAAtB;;AAAA;;AAAA,AAAA,AAAAgB,AAAAE;;;AASA,AAAA,AAAA;AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGoB;AADH,AAAA,AAAAnB,AAAA,AACGmB;AADH,AAAA,AAAAlB,AAAA,AAAAC,AACGiB;AADHlB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/D,AAAA,AAAA+D,AAAA,AAAA,AAAA,AAAA,AAAA9D,AAAAC,AAAA6D,AAAAA;AAAA,AAAA5D,AAAA4D,AAAA,AACiBnD;AADjB,AAAAT,AAAA4D,AAAA,AACqBmB;AADrB,AAAA/E,AAAA4D,AAAA,AAC2BoB;AAD3B,AAAAhF,AAAA4D,AAAA,AACqCqB;AADrC,AA8BE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAACC,AAA4B,AAAA,AAAA,AAAI,AAACzE,AAAED,AAAIsE;AAAxC,AAC6B,AACE,AAACC,AAAAA,AAAAA,AAAUvE,AAAAA;;AACX,AAAA2E,AAAW3E;AAAX4E,AAAe,AAAAH;AAAf,AAAA,AAAAE,AAAAC,AAAAD,AAAAC,AAACJ,AAAAA,AAAAA;AAC9B,AAAA,AAAA,AAAA,AAAA,AAACE,AAA2C,AAAA/E,AAAI,AAAA,AAAkBK;AAAtB,AAAA,AAAAL;AAAAA;;AAA2B,AAACH,AAAaQ;;AACrF,AAAA,AAAC0E,AACC,AAAAG,AAAQ7E;AAAR6E,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAA,AAAA;AAAA;;AAAA,AAAAA,AAAmB1E;;AACnB,AAAI,AAAA2E,AAAQ9E;AAAR8E,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAA,AAAA;AAAA;;AAAmB,AAAAA,AAAA,AAACC;;AAAxB,AACE,AAAA,AAAA,AAACC;;;AAtCT,AAAA,AAAA,AAAA3B,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA;;;AAAA,AAAAC,AAAUU;AAAV,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAArE,AAAA0D,AAAA;AAAA,AAAA,AAAAW;AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAAC,AAAAJ;AAAAK,AAAA,AAAAC,AAAAP,AAAA;AAAA,AAAA,AAAAG,AAAAA,AAAAE,AAAAC,AAAAH,AAAAE,AAAAC;;AAAA,AAAAF;;;AAAA,AAAA,AAAAH,AAAA,AAAAO,AAAA,AAAA,AAAA;AAAA,AAAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAlB,AAAUmB;AAwCV,AAAKa,AAAgB,AAACC,AAAWd;AAEjC,AAAA,AAAA;AAAA,AAAAnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA6ByCiD,AAOAC,AAEfC,AAAsBhC,AAIvB,AAAKC;AAAL,AACE,AAAA,AAAA,AAACiC,AAAajC;AA3CzC,AACGA;AADH,AAAA,AAAAnB,AAAA,AACGmB;AADH,AAAA,AAAAc,AAAA,AAAA/B,AACGiB;AADHc,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/F,AAAA,AAAA+F,AAAA,AAAA,AAAA,AAAA,AAAA9F,AAAAC,AAAA6F,AAAAA;AAAA,AAAA5F,AAAA4F,AAAA,AAEY5E;AAFZ,AAAAhB,AAAA4F,AAAA,AAEoB1C;AAFpB,AAAAlD,AAAA4F,AAAA,AAE2Bb;AAF3B,AAAA/E,AAAA4F,AAAA,AAEiCtC;AAFjCuC,AAAA,AAAAC,AACGhB;AADHe,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhG,AAAA,AAAAgG,AAAA,AAAA,AAAA,AAAA,AAAA/F,AAAAC,AAAA8F,AAAAA;AAAA,AAAA7F,AAAA6F,AAAA,AAGYZ,AACUsB;AAJtB,AAAAR,AACGjB,AAIA0B;AALH,AA4EE,AAAMmB,AAAU,AAAI,AAACC,AAAI1E,AAAQI,AAAiBtC;AAC5CgE,AAAU,AAAA,AAAC6C,AAAa/C;AAD9B,AAEE,AAAA,AAACK,AACC,AAAA,AAACA,AACC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA2C,AAACC,AAA+B7E;AAAhC,AAEiC,AAAA,AAAA4E,AAACE,AAASlD;AAF3C,AAGgC,AAAA,AAAC+C,AAAa/C,AAC9C,AAAI,AAAC8C,AAAID,AACP,AAAA,AAACxC,AACC,AAAA8C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEuBlD,AACA,AAACoD,AAAK1I,AAAYkI,AAClB3C,AACA,AAAA,AAAC6C,AAAa/C,AACd,AAAA,AAAC+C,AAAa/C,AACdvE,AACA,AAAA,AAACsH,AAAa/C;AARrC,AAAA,AAAAmD,AAAAA,AAACC,AAAAA,AAAAA;AAFL;;AApFR,AAAApD,AAAAkB;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAuCyB,AAAKlB;AAAL,AACE,AAAA,AAAA,AAAA,AAACgC,AAAWhC,AAAKvD,AAAqCuD;;AACtD,AAAS,AAAA,AAACJ,AAASI;AAzC9C,AAM8B9D;AAN9B,AAO2B,AAAMA,AAAQ,AAACqC,AAAQpD,AAAae;AAApC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACsB,AAACyF,AACDzF,AACA,AAAC0F,AAAM1F;AAVxD,AACG8D;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AA4CyB,AAAKA;AAAL,AACE,AAAA,AAAAkC,AAAMhC;AAAN,AAAiB,AAAA,AAAAgC,AAACC,AAAcnC;;AAC1BoC,AAAU;AAAA,AACE,AAAA,AAAA,AAACH,AAAajC;;AAFhC,AAAA,AAAA,AAIG,AAAKrE,AAAI0G;AAAT,AACE,AAAAC,AAEM,AAAA,AAAItC,AAAKjB,AAASiC;AAFxBsB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvH,AAAA,AAAAuH,AAAA,AAAA,AAAA,AAAA,AAAAtH,AAAAC,AAAAqH,AAAAA;AAAA,AAAApH,AAAAoH,AAAA,AAAenC,AACUsB;AADzB,AAGE,AAAkBY;;AAClB,AAAAE,AAAW5G;AAAX6G,AAAe,AAAUH;AAAzB,AAAA,AAAAE,AAAAC,AAAAD,AAAAC,AAACrC,AAAAA,AAAAA;AATR,AAAA,AAYGD,AAGA,AAAKvE;AAAL,AACE,AAAA8G,AAAiC,AAAC1D,AAASiB;AAA3CyC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1H,AAAA,AAAA0H,AAAA,AAAA,AAAA,AAAA,AAAAzH,AAAAC,AAAAwH,AAAAA;AAAAA,AAA0BvB;AAA1B,AAAAhG,AAAAuH,AAAA,AAAexC;AAAfyC,AAEM,AAAIxB,AAAMF;AAFhB0B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3H,AAAA,AAAA2H,AAAA,AAAA,AAAA,AAAA,AAAA1H,AAAAC,AAAAyH,AAAAA;AAAA,AAAAxH,AAAAwH,AAAA,AACevC,AAA0BsB;AADzC,AAGE,AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAA,AAA8BhH,AACAsE,AACAC,AACAC;AAH9B,AAAA,AAAAwC,AAAAA,AAAC/B,AAAAA,AAAAA;AAnBR,AAAA;AAAA,AAyBI,AAAA,AAAChB,AAASI;AAzBd,AA4BG,AAAKqC;AAAL,AACE,AAAA,AAAA,AAACO,AAAgB5C,AAA+BqC;;AAChD,AAACD;;;AA3EjC,AAAA,AAAA,AAAApD,AAAAC,AAAAC,AAAAC,AAAAgC;AAAA;AAAA,AAAA;;;AAAA,AAAA9B,AAAUmC;AAAV,AAAA,AAAAlC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAArE,AAAA0D,AAAA;AAAA,AAAA,AAAAW;AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA8B,AAAA,AAAA,AAAA,AAAAC,AAAA/B;AAAAgC,AAAA,AAAA1B,AAAAP,AAAA;AAAA,AAAA,AAAAG,AAAAA,AAAA6B,AAAAC,AAAA9B,AAAA6B,AAAAC;;AAAA,AAAAF;;;AAAA,AAAA,AAAA9B,AAAA,AAAAiC,AAAA,AAAA,AAAA;AAAA,AAAAA;;;;AAAA;;;;AAAA,AAAAzB,AAAA,AAAAlB,AAAU4C;AAgGV,AAAK8B,AAAU,AAACzC,AAAWW","names":["nubank.workspaces.ui.spotlight/max-results","nubank.workspaces.ui.spotlight/spotlight-lookup-debounce-ms","p__72190","map__72193","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","nubank.workspaces.ui.spotlight/value->label","id","label","or__4126__auto__","p__72200","map__72201","nubank.workspaces.ui.spotlight/value->key","type","opt","cljs.core._EQ_","G__72210","cljs.core/name","p__72217","map__72220","nubank.workspaces.ui.spotlight/fuzzy-match","options","search-input","com.wsscode.fuzzy/fuzzy-match","p1__72211#","cljs.core.map","cljs.core.assoc","com.fulcrologic.fulcro.ui-state-machines/register-state-machine!","nubank.workspaces.ui.spotlight/spotlight-sm","env","com.fulcrologic.fulcro.ui-state-machines/activate","map__72229","map__72233","data","com.fulcrologic.fulcro.ui-state-machines/aliased-data","com.fulcrologic.fulcro.ui_state_machines.set_aliased_value","cljs.core/count","nubank.workspaces.ui.spotlight/reset","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__72241","p__72243","map__72246","*after-render*-orig-val__72249","com.fulcrologic.fulcro.components/*after-render*","*after-render*-temp-val__72250","*after-render*-orig-val__72255","*after-render*-temp-val__72256","temp__5753__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","state","ref","map__72251","filter","cljs.core/deref","cljs.core.get_in","cljs.core.sort_by","filtered-options","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/assoc","options__55349__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__72264","com.fulcrologic.fulcro.components/props","js/nubank","js/nubank.workspaces","js/nubank.workspaces.ui","js/nubank.workspaces.ui.spotlight","js/nubank.workspaces.ui.spotlight.SpotlightEntry","props__55350__auto__","this__55351__auto__","temp__5751__auto__","init-state__55352__auto__","obj72274","G__72275","G__72276","goog.object/get","obj72281","com.fulcrologic.fulcro.components/configure-component!","nubank.workspaces.ui.spotlight/SpotlightEntry","this","value","on-change","on-select","p1__72260#","com.fulcrologic.fulcro_css.localized_dom.div","G__72266","G__72267","G__72268","G__72272","cljs.core.not_EQ_","com.fulcrologic.fulcro_css.localized_dom.span","nubank.workspaces.ui.spotlight/spotlight-entry","com.fulcrologic.fulcro.components.factory","map__72296","map__72297","com.fulcrologic.fulcro.components.get_computed","com.fulcrologic.fulcro.components/get-extra-props","props","js/nubank.workspaces.ui.spotlight.Spotlight","obj72323","G__72324","G__72325","obj72327","nubank.workspaces.ui.spotlight/Spotlight","cljs.core/identity","css","cljs.core/random-uuid","cljs.core/first","nubank.workspaces.ui.core/font-helvetica","nubank.workspaces.ui.core/font-open-sans","nubank.workspaces.ui.cursor/VerticalCursor","com.fulcrologic.fulcro.ui_state_machines.begin_BANG_","com.fulcrologic.fulcro.ui_state_machines.trigger_BANG_","p1__72282#","com.fulcrologic.fulcro.mutations/set-value!","lookup","e","map__72307","G__72309","G__72310","map__72314","map__72315","G__72318","com.fulcrologic.fulcro.ui-state-machines/set-string!","options'","cljs.core/seq","com.fulcrologic.fulcro.components.get_state","p1__72283#","com.fulcrologic.fulcro_css.localized_dom.input","goog.object/set","G__72303","nubank.workspaces.ui.cursor/vertical-cursor","cljs.core.take","nubank.workspaces.ui.spotlight/spotlight"],"sourcesContent":["(ns nubank.workspaces.ui.spotlight\n  (:require [com.wsscode.fuzzy :as fuzzy]\n            [com.fulcrologic.fulcro-css.localized-dom :as dom]\n            [com.fulcrologic.fulcro.mutations :as fm]\n            [com.fulcrologic.fulcro.components :as fp]\n            [com.fulcrologic.fulcro.ui-state-machines :as fsm]\n            [goog.functions :as gfun]\n            [goog.object :as gobj]\n            [nubank.workspaces.ui.core :as uc]\n            [nubank.workspaces.ui.cursor :as cursor]\n            [nubank.workspaces.ui.events :as dom-events]))\n\n(def max-results 50)\n(def spotlight-lookup-debounce-ms 150)\n\n(defn value->label [{::keys [id label]}]\n  (or label (str id)))\n\n(defn value->key [{::keys [type id] :as opt}]\n  (if (= type ::workspace)\n    (str id)\n    (str (some-> opt ::type name) \"-\" (value->label opt))))\n\n(defn fuzzy-match [{:keys [options search-input]}]\n  (fuzzy/fuzzy-match {::fuzzy/search-input search-input\n                      ::fuzzy/options      (map #(assoc % ::fuzzy/string (value->label %)) options)}))\n\n(fsm/defstatemachine spotlight-sm\n  {::fsm/aliases\n   {:search-input    [:spotlight ::filter]\n    :options         [:spotlight ::options]\n    :current-options [:spotlight ::filtered-options]}\n\n   ::fsm/states\n   {:initial\n    {::fsm/handler\n     (fn [env]\n       (-> env\n           (fsm/activate :searching)))}\n\n    :searching\n    {::fsm/events\n     {::fsm/value-changed\n      {}\n\n      :lookup!\n      {::fsm/handler\n       (fn [env]\n         (let [{:keys [search-input options] :as data} (fsm/aliased-data env)]\n           (-> env\n               (fsm/set-aliased-value :current-options\n                 (if (< (count search-input) 3)\n                   options\n                   (fuzzy-match data))))))}\n\n      :exit!\n      {::fsm/target-state ::fsm/exit}}}}})\n\n(fm/defmutation reset [{::keys [options]}]\n  (action [{:keys [state ref]}]\n    (let [{::keys [filter]} (get-in @state ref)\n          options          (sort-by value->label options)\n          filtered-options (fuzzy-match {:search-input filter :options options})]\n      (swap! state update-in ref assoc\n        ::options options\n        ::filtered-options filtered-options))))\n\n(fp/defsc SpotlightEntry\n  [this {::keys [opt value on-change on-select]}]\n  {:css [[:.option\n          {:color         \"#1d1d1d\"\n           :cursor        \"pointer\"\n           :font-size     \"16px\"\n           :padding       \"2px 3px\"\n           :white-space   \"nowrap\"\n           :overflow      \"hidden\"\n           :text-overflow \"ellipsis\"}\n\n          [:b\n           {:background \"#e2d610\"\n            :color      \"#000\"}]]\n\n         [:.option-type\n          {:font-size  \"11px\"\n           :font-style \"italic\"}]\n\n         [:.option-selected\n          {:background \"#582074\"\n           :color      \"#fff\"}]\n\n         [:.solo-hint\n          {:display \"none\"}]\n\n         [:$cljs-workspaces-extended-views\n          [:.option-selected\n           [:.solo-hint\n            {:display \"inline\"}]]]]}\n  (dom/div :.option {:classes [(if (= opt value) :.option-selected)]\n                     :onClick #(do\n                                 (on-change opt)\n                                 (on-select opt (.-altKey %)))}\n    (dom/div {:dangerouslySetInnerHTML {:__html (or (::fuzzy/match-hl opt) (value->label opt))}})\n    (dom/div :.option-type\n      (some-> opt ::type name)\n      (if (some-> opt ::type (not= ::workspace))\n        (dom/span :.solo-hint \" - open solo\")))))\n\n(def spotlight-entry (fp/factory SpotlightEntry))\n\n(fp/defsc Spotlight\n  [this\n   {::keys [options filter value filtered-options]}\n   {::keys [on-select]\n    :or    {on-select identity}}\n   css]\n  {:initial-state        (fn [options]\n                           (let [options (sort-by value->label options)]\n                             {::id               (random-uuid)\n                              ::options          options\n                              ::value            (first options)\n                              ::filter           \"\"\n                              ::filtered-options []}))\n   :ident                [::id ::id]\n   :query                [::id ::options ::filter ::filtered-options ::value]\n   :css                  [[:.area-container\n                           {:height \"600px\"}]\n\n                          [:.container\n                           {:background    \"#e2e2e2\"\n                            :border-radius \"3px\"\n                            :box-shadow    \"0 6px 6px rgba(0, 0, 0, 0.26), 0 10px 20px rgba(0, 0, 0, 0.19), 0 0 2px rgba(0,0,0,0.3)\"\n                            :padding       \"10px\"}]\n\n                          [:.search\n                           {:background  \"#cccbcd\"\n                            :border      \"0\"\n                            :box-sizing  \"border-box\"\n                            :color       \"#000\"\n                            :font-family uc/font-helvetica\n                            :font-size   \"32px\"\n                            :outline     \"0\"\n                            :padding     \"10px\"\n                            :width       \"100%\"}]\n\n                          [:.options\n                           {:font-family uc/font-open-sans\n                            :margin-top  \"10px\"}]]\n   :css-include          [cursor/VerticalCursor SpotlightEntry]\n   :componentDidMount    (fn [this]\n                           (fsm/begin! this spotlight-sm ::spotlight {:spotlight this})\n                           (.select (gobj/get this \"input\")))\n   :componentWillUnmount (fn [this]\n                           (fsm/trigger! this ::spotlight :exit!))\n   :initLocalState       (fn [this]\n                           (let [on-change #(fm/set-value! this ::value %)\n                                 lookup    (fn []\n                                             (fsm/trigger! this ::spotlight :lookup!))]\n                             {:cursor-select\n                              (fn [opt e]\n                                (let [{::keys [on-select]\n                                       :or    {on-select identity}}\n                                      (-> this fp/props fp/get-computed)]\n                                  (.stopPropagation e)\n                                  (on-select opt (.-altKey e))))\n\n                              :cursor-change\n                              on-change\n\n                              :cursor-factory\n                              (fn [opt]\n                                (let [{::keys [value] :as props} (fp/props this)\n                                      {::keys [on-select] :or {on-select identity}}\n                                      (-> props fp/get-computed)]\n                                  (spotlight-entry {::opt       opt\n                                                    ::value     value\n                                                    ::on-change on-change\n                                                    ::on-select on-select})))\n\n                              :cursor-target\n                              #(gobj/get this \"input\")\n\n                              :update-input\n                              (fn [e]\n                                (fsm/set-string! this ::spotlight :search-input e)\n                                (lookup))}))}\n  (let [options'  (if (seq filter) filtered-options options)\n        on-change (fp/get-state this :cursor-change)]\n    (dom/div :.area-container\n      (dom/div :.container\n        (dom/input :.search {:value     filter\n                             :autoFocus true\n                             :ref       #(gobj/set this \"input\" %)\n                             :onChange  (fp/get-state this :update-input)})\n        (if (seq options')\n          (dom/div :.options\n            (cursor/vertical-cursor\n              {:style              {:maxHeight \"500px\"}\n               ::cursor/value      value\n               ::cursor/options    (take max-results options')\n               ::cursor/on-change  on-change\n               ::cursor/on-select  (fp/get-state this :cursor-select)\n               ::cursor/factory    (fp/get-state this :cursor-factory)\n               ::cursor/value->key value->key\n               ::dom-events/target (fp/get-state this :cursor-target)})))))))\n\n(def spotlight (fp/factory Spotlight))\n"]}