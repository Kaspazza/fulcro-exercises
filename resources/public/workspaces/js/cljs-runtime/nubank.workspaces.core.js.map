{"version":3,"sources":["nubank/workspaces/core.cljs"],"mappings":"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","names":["nubank.workspaces.core/init-card","card-id","card","cljs.core.assoc","and__4115__auto__","nubank.workspaces.data/app*","cljs.core/deref","cljs.core/contains?","nubank.workspaces.data/card-definitions*","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","com.fulcrologic.fulcro.components.transact_BANG_","cljs.core.swap_BANG_","cljs.core/assoc","p__74541","map__74542","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","nubank.workspaces.core/init-workspace","workspace-id","workspace-layouts","workspace","cljs.core.pr_str","nubank.workspaces.lib.local-storage/read-transit","com.fulcrologic.fulcro.application/mounted?","nubank.workspaces.data/workspace-definitions*","nubank.workspaces.core/init-test","sym","forms","card-form","nubank.workspaces.card-types.test/test-card","test-ns","cljs.core.symbol","cljs.core/namespace","nubank.workspaces.card-types.test/test-ns-card","nubank.workspaces.card-types.test/all-tests-card","options__55349__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__74546","com.fulcrologic.fulcro.components/props","js/nubank","js/nubank.workspaces","js/nubank.workspaces.core","js/nubank.workspaces.core.Root","props__55350__auto__","this__55351__auto__","temp__5751__auto__","init-state__55352__auto__","obj74550","G__74551","G__74552","goog.object/get","obj74554","com.fulcrologic.fulcro.components/configure-component!","nubank.workspaces.core/Root","this","root","_","com.fulcrologic.fulcro.components.get_initial_state","nubank.workspaces.ui/WorkspacesRoot","com.fulcrologic.fulcro.components.get_query","nubank.workspaces.ui/workspaces-root","var_args","G__74557","nubank.workspaces.core/mount","js/Error","nubank.workspaces.core.mount","selector","com.fulcrologic.fulcro.application.mount_BANG_","js/document.querySelector","nubank.workspaces.core/before-load","cljs.core/reset!","nubank.workspaces.data/card-definitions-snap*","nubank.workspaces.core/after-load","nubank.workspaces.ui/refresh-active-workspace-cards"],"sourcesContent":["(ns nubank.workspaces.core\n  (:require-macros nubank.workspaces.core)\n  (:require [com.fulcrologic.fulcro.application :as app]\n            [com.fulcrologic.fulcro.components :as fp]\n            [nubank.workspaces.card-types.test :as ct.test]\n            [nubank.workspaces.ui :as ui]\n            [nubank.workspaces.data :as data]\n            [nubank.workspaces.model :as wsm]\n            [nubank.workspaces.lib.local-storage :as local-storage]))\n\n(defn init-card [card-id card]\n  (let [card (assoc card ::wsm/card-id card-id)]\n    (if (and (:mounted? data/app*) (not (contains? @data/card-definitions* card-id)))\n      (fp/transact! data/app* [`(ui/load-card ~card)]))\n    (swap! data/card-definitions* assoc card-id card)))\n\n(defn init-workspace [workspace-id {::wsm/keys [workspace-layouts] :as workspace}]\n  (let [workspace (assoc workspace\n                    ::wsm/workspace-static? true\n                    ::ui/workspace-title (pr-str workspace-id)\n                    ::ui/workspace-id workspace-id\n                    ::ui/layouts (local-storage/read-transit workspace-layouts))]\n\n    (if (app/mounted? data/app*)\n      (if (not (contains? @data/workspace-definitions* workspace-id))\n        (fp/transact! data/app* [`(ui/load-workspace ~workspace)])\n        (fp/transact! data/app* [`(ui/update-workspace ~workspace)])))\n\n    (swap! data/workspace-definitions* assoc workspace-id\n      workspace)))\n\n(defn init-test [sym forms card-form]\n  (init-card sym (assoc (ct.test/test-card sym forms) ::wsm/card-form card-form))\n\n  ; start ns test card\n  (let [test-ns (symbol (namespace sym))]\n    (if-not (contains? @data/card-definitions* test-ns)\n      (init-card test-ns (ct.test/test-ns-card test-ns))))\n\n  ; start all tests card\n  (if-not (contains? @data/card-definitions* `ct.test/test-all)\n    (init-card `ct.test/test-all (ct.test/all-tests-card))))\n\n(fp/defsc Root [this {:keys [ui/root]}]\n  {:initial-state (fn [_] {:ui/root (fp/get-initial-state ui/WorkspacesRoot @data/card-definitions*)})\n   :query         [{:ui/root (fp/get-query ui/WorkspacesRoot)}]}\n  (ui/workspaces-root root))\n\n(defn mount\n  \"Mount the workspaces enviroment, by default it will try to mount at #app node.\n  Use the selector string to pass a querySelector string to pick the mount node.\"\n  ([] (mount \"#app\"))\n  ([selector]\n   (app/mount! data/app* Root (js/document.querySelector selector)) ))\n\n(defn before-load\n  {:dev/before-load true}\n  []\n  (reset! data/card-definitions-snap* @data/card-definitions*))\n\n(defn after-load\n  {:dev/after-load true}\n  []\n  (ui/refresh-active-workspace-cards data/app*)\n  (reset! data/card-definitions-snap* @data/card-definitions*))\n"]}