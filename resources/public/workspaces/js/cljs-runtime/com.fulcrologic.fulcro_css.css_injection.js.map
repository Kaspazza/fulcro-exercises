{"version":3,"sources":["com/fulcrologic/fulcro_css/css_injection.cljc"],"mappings":"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","names":["var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro-css.css-injection/error","seq70435","self__4724__auto__","cljs.core/seq","msg","cljs.core.apply","js/console.log","com.fulcrologic.fulcro-css.css-injection/component-css-includes-with-depth","component","breadth","depth","includes","com.fulcrologic.fulcro-css.css/get-includes","cljs.core.into","p1__70444#","cljs.core.map","cljs.core/PersistentHashMap","p1__70445#","cljs.core.mapcat","G__70446","G__70447","G__70448","p__70452","map__70455","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","com.fulcrologic.fulcro-css.css-injection/find-css-nodes","order","state-map","query","cljs.core/map?","com.fulcrologic.fulcro.components.get_query","ast","edn-query-language.core/query->ast","cljs.core.atom","traverse","p__70458","map__70459","children","G__70462","and__4115__auto__","com.fulcrologic.fulcro-css.css/CSS?","cljs.core.conj","cljs.core.swap_BANG_","cljs.core/inc","cljs.core/deref","p1__70449#","traverse*","nodes","ordered-nodes","cljs.core._EQ_","cljs.core.sort_by","p1__70450#","unique-nodes","cljs.core.distinct","com.fulcrologic.fulcro_css.css_injection.error","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.core/seq?","get-rules","components","p1__70474#","p2__70475#","cljs.core.reduce","com.fulcrologic.fulcro-css.css/get-css-rules","com.fulcrologic.fulcro-css.css-injection/compute-css","props","js/Error","cljs.core/contains?","map__70483","auto-include?","garden-flags","rules","G__70485","com.fulcrologic.fulcro-css.css/get-css","G__70488","css","garden.core.css","options__55349__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__70512","com.fulcrologic.fulcro.components/props","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro-css","js/com.fulcrologic.fulcro-css.css-injection","js/com.fulcrologic.fulcro-css.css-injection.StyleElement","props__55350__auto__","this__55351__auto__","temp__5751__auto__","init-state__55352__auto__","obj70544","G__70545","G__70546","goog.object/get","obj70552","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.fulcro-css.css-injection/StyleElement","this","key","com.fulcrologic.fulcro.components.set_state_BANG_","com.fulcrologic.fulcro.dom.macro_create_element","com.fulcrologic.fulcro.components.get_state","factory","com.fulcrologic.fulcro.components.factory","com.fulcrologic.fulcro-css.css-injection/style-element","G__70564","com.fulcrologic.fulcro.components/component?","cljs.core.assoc","G__70566","com.fulcrologic.fulcro.components/any->app","com.fulcrologic.fulcro.application.current_state","cljs.core.update","com.fulcrologic.fulcro.components/react-type","com.fulcrologic.fulcro-css.css-injection/remove-from-dom","id","old-element","js/document","parent","com.fulcrologic.fulcro-css.css-injection/upsert-css","options","style-ele"],"sourcesContent":["(ns com.fulcrologic.fulcro-css.css-injection\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.application :as app]\n    [clojure.spec.alpha :as s]\n    [garden.core :as g]\n    [edn-query-language.core :as eql]\n    [com.fulcrologic.fulcro-css.css :as css]\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom])))\n\n(defn error [& msg]\n  #?(:cljs (apply js/console.log msg)\n     :clj  (.println System/err (apply str msg))))\n\n(defn component-css-includes-with-depth [component breadth depth]\n  (let [includes (css/get-includes component)]\n    (-> (into []\n          (map #(hash-map ::depth (inc depth)\n                  ::breadth breadth\n                  ::component %))\n          includes)\n      (into (mapcat #(component-css-includes-with-depth % breadth (inc depth)) includes)))))\n\n(defn find-css-nodes\n  \"Scan the given component and return an ordered vector of the css rules in depth-first order.\n  `order` can be :depth-first (default) or :breadth-first\"\n  [{:keys [component order state-map]}]\n  (let [query         (if (map? state-map) (comp/get-query component state-map) (comp/get-query component))\n        ast           (eql/query->ast query)\n        breadth       (atom 0)\n        traverse      (fn traverse* [{:keys [children component]} depth]\n                        (into\n                          (cond-> []\n                            (and component (css/CSS? component)) (conj {::depth     depth\n                                                                        ::breadth   (swap! breadth inc)\n                                                                        ::component component})\n                            component (into (component-css-includes-with-depth component @breadth depth)))\n                          (mapcat #(traverse* % (inc depth)) (seq children))))\n        nodes         (traverse ast 0)\n        ordered-nodes (if (= order :breadth-first)\n                        (sort-by ::breadth nodes)\n                        (sort-by #(- (::depth %)) nodes))\n        unique-nodes  (distinct (map ::component ordered-nodes))]\n    (when-not query\n      (error \"Auto-include was used for CSS, but the component had no query! No CSS Found.\"))\n    unique-nodes))\n\n(s/fdef find-css-nodes\n  :args (s/cat :options map?)\n  :ret seq?)\n\n(let [get-rules (fn [components] (reduce #(into %1 (css/get-css-rules %2)) [] components))]\n  (defn compute-css\n    \"Compute the stringified CSS based on the given props. This can be used to generate a\n    server-side version of CSS for the initial DOM, and is used the other injection functions to compute\n    the CSS.\n\n    Props are as described in `style-element`.\n    \"\n    [props]\n    (assert (and (map? props) (contains? props :component)) \"Argument must be a map that contains the key :component\")\n    (let [{:keys [component auto-include? garden-flags] :or {garden-flags {}}} props\n          rules (if (false? auto-include?)\n                  (some-> component (css/get-css))\n                  (some-> (find-css-nodes props) get-rules))\n          css   (g/css garden-flags rules)]\n      css)))\n\n(defsc StyleElement [this {:keys [order key]}]\n  {:componentDidMount (fn [this]\n                        (let [css (compute-css (comp/props this))]\n                          (comp/set-state! this {:css css})))}\n  ;; This ensures best performance. React doesn't check/diff it this way.\n  (dom/style {:dangerouslySetInnerHTML {:__html (comp/get-state this :css)}}))\n\n(let [factory (comp/factory StyleElement)]\n  (defn style-element\n    \"Renders a style element. Valid props are:\n\n     - `:component`: (REQUIRED) The UI component to pull CSS from. Class or instance allowed.\n     - `:order`: (optional)  `:depth-first` (default) or `:breadth-first` (legacy order)\n     - `:react-key` : (optional) A React key. Changing the key will force it to update the CSS (which is otherwise caches for performance)\n     - `:auto-include?`: (optional) When set to true (default) it will use the component query to recursively scan for\n       CSS instead of explicit includes. When set to (exactly) `false` then it ONLY uses the user-declared inclusions on\n       the component.\n     - `:garden-flags`: (optional) A map with [garden compiler flags](https://github.com/noprompt/garden/wiki/Compiler#flags)\n\n    The resulting React style element avoids re-rendering unless the props change, and the CSS is cached at component mount; therefore\n    this element will avoid all overhead on refresh. In development you may wish to have the CSS change on hot code reload, in which case\n    you can simply change the `:react-key` on the props to force a re-mount (which will recompute the CSS).\n    \"\n    [props]\n    (let [component (:component props)\n          props     (cond-> props\n                      (comp/component? component) (->\n                                                    (assoc :state-map (some-> component comp/any->app app/current-state))\n                                                    (update :component comp/react-type)))]\n      #?(:cljs (factory props)\n         :clj  (dom/style {}\n                 (compute-css props))))))\n\n#?(:cljs\n   (defn remove-from-dom \"Remove the given element from the DOM by ID\"\n     [id]\n     (if-let [old-element (.getElementById js/document id)]\n       (let [parent (.-parentNode old-element)]\n         (.removeChild parent old-element)))))\n\n#?(:clj\n   (defn upsert-css\n     \"In CLJ this is a STUB (to prevent compile errors in CLJC UI files).\n\n     Upsert-css not available for CLJ use. There is no DOM.  Use `compute-css` and manual embedding in your returned server page instead.\"\n     [id options]\n     (error \"Upsert-css not available for CLJ use. There is no DOM.  Use `compute-css` and manual embedding in your returned server page instead.\"))\n   :cljs\n   (defn upsert-css\n     \"(Re)place the STYLE element with the provided ID on the document's low-level DOM with the co-located CSS of\n     the specified component.\n\n     The `options` is the same as passed to `style-element`:\n\n     - `:component`: (REQUIRED) The UI component to pull CSS from. Class or instance allowed.\n     - `:order`: (optional)  `:depth-first` (default) or `:breadth-first` (legacy order)\n     - `:react-key` : (optional) A React key. Changing the key will force it to update the CSS (which is otherwise caches for performance)\n     - `:auto-include?`: (optional) When set to true (default) it will use the component query to recursively scan for\n       CSS instead of explicit includes. When set to (exactly) `false` then it ONLY uses the user-declared inclusions on\n       the component.\n     - `:garden-flags`: (optional) A map with [garden compiler flags](https://github.com/noprompt/garden/wiki/Compiler#flags)\n\n     ONLY WORKS FOR CLJS, since otherwise there is no DOM to change.\"\n     [id options]\n     (assert (and (map? options) (contains? options :component)) \"Argument must be a map that contains the key :component\")\n     (remove-from-dom id)\n     (let [style-ele (.createElement js/document \"style\")\n           css       (compute-css options)]\n       (set! (.-innerHTML style-ele) css)\n       (.setAttribute style-ele \"id\" id)\n       (.appendChild (.-body js/document) style-ele))))\n"]}