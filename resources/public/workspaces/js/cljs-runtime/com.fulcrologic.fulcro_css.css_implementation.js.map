{"version":3,"sources":["com/fulcrologic/fulcro_css/css_implementation.cljc"],"mappings":"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","names":["com.fulcrologic.fulcro-css.css-implementation/cssify","str","clojure.string/replace","com.fulcrologic.fulcro-css.css-implementation/fqname","comp-class","com.fulcrologic.fulcro.components/class->registry-key","var_args","G__66061","com.fulcrologic.fulcro-css.css-implementation/local-class","js/Error","nm","cljs.core/name","com.fulcrologic.fulcro-css.css-implementation/set-classname","m","subclasses","cljs.core/clj->js","cljs.core.assoc","cljs.core.dissoc","com.fulcrologic.fulcro-css.css-implementation/CSS?","x","cljs.core/boolean","G__66072","com.fulcrologic.fulcro.components/component-options","com.fulcrologic.fulcro-css.css-implementation/get-local-rules","component","temp__5751__auto__","entry","G__66074","cljs.core/fn?","cljs.core/vector?","cljs.core.println","com.fulcrologic.fulcro.components/component-name","com.fulcrologic.fulcro-css.css-implementation/get-global-rules","G__66078","com.fulcrologic.fulcro-css.css-implementation/prefixed-name?","cljs.core/re-matches","com.fulcrologic.fulcro-css.css-implementation/get-prefix","vec__66081","cljs.core.nth","_","prefix","com.fulcrologic.fulcro-css.css-implementation/prefixed-keyword?","kw","cljs.core/Keyword","com.fulcrologic.fulcro-css.css-implementation/remove-prefix","cljs.core.subs","cljs.core/count","com.fulcrologic.fulcro-css.css-implementation/remove-prefix-kw","cljs.core.keyword","com.fulcrologic.fulcro-css.css-implementation/get-includes","includes","G__66099","or__4126__auto__","com.fulcrologic.fulcro-css.css-implementation/get-nested-includes","direct-children","cljs.core/empty?","cljs.core.concat","p1__66103#","p2__66104#","cljs.core.reduce","com.fulcrologic.fulcro-css.css-implementation/localize-name","comp","no-prefix","G__66122","com.fulcrologic.fulcro_css.css_implementation.local_class","com.fulcrologic.fulcro-css.css-implementation/localize-kw","com.fulcrologic.fulcro-css.css-implementation/kw->localized-classname","G__66124","com.fulcrologic.fulcro-css.css-implementation/selector?","e66128","cljs.core._EQ_","js/garden.selectors.CSSSelector","cljs.core/type","e","com.fulcrologic.fulcro-css.css-implementation/get-selector-keywords","selector","val","garden.selectors/css-selector","classnames","p1__66130#","cljs.core.filter","clojure.string.split","cljs.core.map","cljs.core/keyword","com.fulcrologic.fulcro-css.css-implementation/get-class-keys","rules","flattened-rules","cljs.core/flatten","selectors","prefixed-kws","cljs.core.distinct","com.fulcrologic.fulcro-css.css-implementation/get-classnames","local-class-keys","global-class-keys","local-classnames","cljs.core/zipmap","p1__66132#","global-classnames","cljs.core.merge"],"sourcesContent":["(ns com.fulcrologic.fulcro-css.css-implementation\n  \"Implementation details for co-located CSS. Do not use these directly.\"\n  ;; IMPORTANT: DO NOT INCLUDE GARDEN HERE!!!!\n  (:require\n    [cljs.tagged-literals]\n    [garden.selectors :as gs]\n    [com.fulcrologic.fulcro.components :as comp]\n    [clojure.string :as str])\n  #?(:clj\n     (:import [garden.selectors CSSSelector])))\n\n;; from core\n(defn cssify\n  \"Replaces slashes and dots with underscore.\"\n  [str] (when str (str/replace str #\"[./]\" \"_\")))\n\n(defn fqname [comp-class] (-> comp-class comp/class->registry-key str (str/replace #\"^:\" \"\")))\n\n(defn local-class\n  \"Generates a string name of a localized CSS class. This function combines the fully-qualified name of the given class\n     with the (optional) specified name.\"\n  ([comp-class]\n   (str (cssify (fqname comp-class))))\n  ([comp-class nm]\n   (str (cssify (fqname comp-class)) \"__\" (name nm))))\n\n(defn set-classname\n  [m subclasses]\n  #?(:clj  (-> m\n             (assoc :className subclasses)\n             (dissoc :class))\n     :cljs (cljs.core/clj->js (-> m\n                                (assoc :className subclasses)\n                                (dissoc :class)))))\n\n(defn CSS?\n  \"Returns true if the given component has css\"\n  [x]\n  (boolean (some-> x comp/component-options :css)))\n\n(defn get-local-rules\n  \"Get the *raw* value from the local-rules of a component.\"\n  [component]\n  (if-let [entry (some-> component comp/component-options :css)]\n    (cond\n      (fn? entry) (entry)\n      (vector? entry) entry\n      :otherwise (do\n                   (println \"Invalid :css on \" (comp/component-name component))\n                   entry))\n    []))\n\n(defn get-global-rules\n  \"Get the *raw* value from the global-rules of a component.\"\n  [component]\n  (if-let [entry (some-> component comp/component-options :css-global)]\n    (cond\n      (fn? entry) (entry)\n      (vector? entry) entry\n      :otherwise (do\n                   (println \"Invalid :css-global on \" (comp/component-name component))\n                   entry))\n    []))\n\n(defn prefixed-name?\n  \"Returns true if the given string starts with one of [. $ &$ &.]\"\n  [nm]\n  (some? (re-matches #\"(\\.|\\$|&\\.|&\\$).*\" nm)))\n\n(defn get-prefix\n  \"Returns the prefix of a string. [. $ &$ &.]\"\n  [nm]\n  (let [[_ prefix] (re-matches #\"(\\.|\\$|&\\.|&\\$).*\" nm)]\n    prefix))\n\n(defn prefixed-keyword?\n  \"Returns true if the given keyword starts with one of [. $ &$ &.]\"\n  [kw]\n  (and (keyword? kw)\n    (prefixed-name? (name kw))))\n\n(defn remove-prefix\n  \"Removes the prefix of a string.\"\n  [nm]\n  (subs nm (count (get-prefix nm))))\n\n(defn remove-prefix-kw\n  \"Removes the prefix of a keyword.\"\n  [kw]\n  (keyword (remove-prefix (name kw))))\n\n(defn get-includes\n  \"Returns the list of components from the include-children method of a component\"\n  [component]\n  (let [includes (some-> component comp/component-options :css-include)]\n    (if (fn? includes)\n      (includes)\n      (or includes []))))\n\n(defn get-nested-includes\n  \"Recursively finds all includes starting at the given component.\"\n  [component]\n  (let [direct-children (get-includes component)]\n    (if (empty? direct-children)\n      []\n      (concat direct-children (reduce #(concat %1 (get-nested-includes %2)) [] direct-children)))))\n\n(defn localize-name\n  [nm comp]\n  (let [no-prefix (remove-prefix nm)\n        prefix    (get-prefix nm)]\n    (case prefix\n      (\".\" \"&.\") (str prefix (local-class comp (keyword no-prefix)))\n      \"$\" (str \".\" no-prefix)\n      \"&$\" (str \"&.\" no-prefix))))\n\n(defn localize-kw\n  [kw comp]\n  (keyword (localize-name (name kw) comp)))\n\n(defn kw->localized-classname\n  \"Gives the localized classname for the given keyword.\"\n  [comp kw]\n  (let [nm        (name kw)\n        prefix    (get-prefix nm)\n        no-prefix (subs nm (count prefix))]\n    (case prefix\n      (\"$\" \"&$\") no-prefix\n      (\".\" \"&.\") (local-class comp no-prefix))))\n\n(defn selector?\n  [x]\n  (try\n    #?(:clj  (= garden.selectors.CSSSelector (type x))\n       :cljs (= js/garden.selectors.CSSSelector (type x)))\n    (catch #?(:cljs :default :clj Throwable) e\n      false)))\n\n(defn get-selector-keywords\n  \"Gets all the keywords that are present in a selector\"\n  [selector]\n  (let [val        (gs/css-selector selector)\n        classnames (filter #(re-matches #\"[.$].*\" %) (str/split val #\" \"))]\n    (map keyword classnames)))\n\n(defn get-class-keys\n  \"Gets all used classnames in from the given rules as keywords\"\n  [rules]\n  (let [flattened-rules (flatten rules)\n        selectors       (filter selector? flattened-rules)\n        prefixed-kws    (filter prefixed-keyword? flattened-rules)]\n    (distinct (concat (flatten (map get-selector-keywords selectors)) prefixed-kws))))\n\n(defn get-classnames\n  \"Returns a map from user-given CSS rule names to localized names of the given component.\"\n  [comp]\n  (let [local-class-keys  (get-class-keys (get-local-rules comp))\n        global-class-keys (map remove-prefix-kw (get-class-keys (get-global-rules comp)))\n        local-classnames  (zipmap (map remove-prefix-kw local-class-keys) (map #(kw->localized-classname comp %) local-class-keys))\n        global-classnames (zipmap global-class-keys (map name global-class-keys))]\n    (merge local-classnames global-classnames)))\n"]}