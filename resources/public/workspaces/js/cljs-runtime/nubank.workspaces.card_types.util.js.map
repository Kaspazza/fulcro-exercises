{"version":3,"sources":["nubank/workspaces/card_types/util.cljs"],"mappings":";AAOA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAgBL,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAA,AAAmCM;AAAnC,AACE,AAAMC,AAAO,AAACH,AAAIN,AAAkBQ,AAAM,AAAA,AAAI,AAACE,AAAKF,AAAOA;AAA3D,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG,AAGMF;;AAEX,AAAA,AAAMG,AAAqBC;AAA3B,AACE,AAAAC,AAAM,AAAA,AAACC;AAAP,AAAA,AAAAD,AAAA,AAAA,AACGE;;AADH,AAAAF,AAEGG,AAAgB,AAACC,AAAQ,AAACX,AAAeM;;AAF5CC;;AAIF,AAAA,AAAMK,AAAgBC;AAAtB,AACE,AAAOA,AAAKA;;AAAZ,AACE,AAAI,AAAA,AAACC,AAASD;AACZ,AAAO,AAACE,AAAsBF;;;;AAC9BA;;;;;AAEN,AAAA,AAAAG,AAAME,AAAiBZ;AAAvB,AAAA,AAAAW,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAApB,AAAAC,AAAAmB,AAAAA;AAAAA,AAAqEK;AAArE,AAAAvB,AAAAkB,AAAA,AAAyCE;AAAzC,AAAApB,AAAAkB,AAAA,AAAiDG;AAAjD,AAAArB,AAAAkB,AAAA,AAAyDI;AAAzD,AACE,AAAME,AAAU,AAAClB,AAAoBC;AAArC,AACE,AAAA,AAACkB,AAAMF,AAEL,AAAKG;AAAL,AAAQ,AAAIN;AAAQ,AAACA,AAAAA,AAAAA,AAAQI,AAAAA;;AAArB;;AAFV,AAKE,AAAKE;AAAL,AAAQ,AAAIL;AAAQ,AAACA,AAAAA,AAAAA,AAAQG,AAAAA;;AAArB;;AALV,AAQE,AAAKV;AAAL,AACE,AAAMA,AAAK,AAACD,AAAeC;AAA3B,AACE,AAAA,AAAA,AAACJ,AAASI;;AACV,AAAcA,AAAKU;;AACnB,AAAA,AAAA,AAACG,AAAMC,AAAmBC,AAAU,AAAA,AAAetB,AAAkBiB;;AACrE,AAACF,AAAAA,AAAAA,AAAOE,AAAAA","names":["nubank.workspaces.card-types.util/predef-alignments","p__70608","map__70609","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","nubank.workspaces.card-types.util/position-style","align","custom","cljs.core/map?","cljs.core.merge","nubank.workspaces.card-types.util/create-wrapper-node","card","G__70620","js/document.createElement","goog.object/set","goog.style/setStyle","cljs.core/clj->js","nubank.workspaces.card-types.util/find-root-node","node","goog.object/get","goog.dom/getParentElement","p__70627","map__70628","nubank.workspaces.card-types.util/positioned-card","dispose","refresh","render","instance","real-node","cljs.core.assoc","_","cljs.core.swap_BANG_","nubank.workspaces.data/active-cards*","cljs.core/assoc-in"],"sourcesContent":["(ns nubank.workspaces.card-types.util\n  (:require [goog.object :as gobj]\n            [goog.dom :as gdom]\n            [goog.style :as gstyle]\n            [nubank.workspaces.model :as wsm]\n            [nubank.workspaces.data :as data]))\n\n(def predef-alignments\n  {::wsm/align-top         {}\n   ::wsm/align-top-flex    {:display \"flex\"\n                            :flex    \"1\"}\n   ::wsm/align-center      {:display         \"flex\"\n                            :align-items     \"center\"\n                            :justify-content \"center\"}\n   ::wsm/align-center-flex {:display         \"flex\"\n                            :flex            \"1\"\n                            :align-items     \"center\"\n                            :justify-content \"center\"}\n   ::wsm/stretch-flex      {:display         \"flex\"\n                            :flex            \"1\"\n                            :align-items     \"stretch\"\n                            :justify-content \"stretch\"}})\n\n(defn position-style [{::wsm/keys [align] :or {align ::wsm/align-center}}]\n  (let [custom (get predef-alignments align (if (map? align) align {}))]\n    (merge {:align-self      \"stretch\"\n            :justify-content \"stretch\"\n            :max-width       \"100%\"}\n           custom)))\n\n(defn create-wrapper-node [card]\n  (doto (js/document.createElement \"div\")\n    (gobj/set \"WORKSPACES_WRAPPER_NODE\" true)\n    (gstyle/setStyle (clj->js (position-style card)))))\n\n(defn find-root-node [node]\n  (loop [node node]\n    (if (gobj/get node \"WORKSPACES_WRAPPER_NODE\")\n      (recur (gdom/getParentElement node))\n      node)))\n\n(defn positioned-card [card {::wsm/keys [dispose refresh render] :as instance}]\n  (let [real-node (create-wrapper-node card)]\n    (assoc instance\n      ::wsm/dispose\n      (fn [_] (if dispose (dispose real-node)))\n\n      ::wsm/refresh\n      (fn [_] (if refresh (refresh real-node)))\n\n      ::wsm/render\n      (fn [node]\n        (let [node (find-root-node node)]\n          (gobj/set node \"innerHTML\" \"\")\n          (.appendChild node real-node)\n          (swap! data/active-cards* assoc-in [(::wsm/card-id card) ::wsm/node] real-node)\n          (render real-node))))))\n"]}